'use strict';

import CaseTeam from '../../../framework/cmmn/team/caseteam';
import CaseTeamUser, { CaseOwner } from "../../../framework/cmmn/team/caseteamuser";
import CaseService from '../../../framework/service/case/caseservice';
import DebugService from '../../../framework/service/case/debugservice';
import RepositoryService from '../../../framework/service/case/repositoryservice';
import StartCase from '../../../framework/service/case/startcase';
import CafienneResponse from '../../../framework/service/response';
import TestCase from '../../../framework/test/testcase';
import { SomeTime } from '../../../framework/test/time';
import WorldWideTestTenant from '../../worldwidetesttenant';

const definition = 'caseteam.xml';

const worldwideTenant = new WorldWideTestTenant();
const tenant = worldwideTenant.name;
const sender = worldwideTenant.sender;
export default class TestInvalidStartCase extends TestCase {
    async onPrepareTest() {
        await worldwideTenant.create();
        await RepositoryService.validateAndDeploy(sender, definition, tenant);
    }

    startCase: StartCase = { tenant, definition, debug: true };

    async run() {

        const startCase = this.startCase;

        // Case team without owner
        startCase.caseTeam = new CaseTeam([new CaseTeamUser(sender)]);
        await this.tryStartCase("Missing owner should fail");

        // Case team with invalid roles
        startCase.caseTeam = new CaseTeam([new CaseOwner(sender, ["ADMIN", "Not-Exisitng-CaseRole-Not-Allowed-In-Team"])]);
        await this.tryStartCase("Invalid roles should fail");

        // TODO: add a check for invalid member type in the backend??
        // Case team with invalid member type
        // startCase.caseTeam = new CaseTeam([new CaseOwner(sender, [], 'wrong-type')]);
        // await this.tryStartCase("Wrong member type should fail");

        // Remove case team, sender would become member and owner of the new case to be started (if that ever succeeds ...)
        delete startCase.caseTeam;

        // Invalid format of case instance id
        startCase.caseInstanceId = 'UeÃ¨';
        await this.tryStartCase(`Invalid case instance id '${startCase.caseInstanceId}' should fail`);

        // Using tenant id as case instance id should fail. tenant is 'World-Wide-Test-Tenant'
        startCase.caseInstanceId = tenant;
        await this.tryStartCase(`Using tenant id as case instance id '${startCase.caseInstanceId}' should fail`);

        // Force tenant recovery and then try again, again it should fail. This validates the recovery in combination first command in different type of model actor
        await DebugService.forceRecovery(sender, tenant);
        await SomeTime(1000, 'Waiting for the tenant to go out-of-memory');
        await this.tryStartCase(`Using tenant id as case instance id '${startCase.caseInstanceId}' should fail`);


        // Remove invalid case instance id and let it be generated by server
        delete startCase.caseInstanceId;

        // Wrong tenant should fail
        startCase.tenant = 'not-existing-tenants';
        await this.tryStartCase(`Wrong tenant should fail with 404`, 404);

        // If user has multiple tenants, listing cases without tenant should fail
        const tenantCount = sender.userInformation?.tenants.length;
        if (tenantCount && tenantCount > 1) {
            // Empty and undefined tenant should fail when user is in multiple tenants
            startCase.tenant = '';
            await this.tryStartCase(`Empty tenant should fail`);

            // Undefined tenant should fail
            startCase.tenant = undefined;
            await this.tryStartCase(`Undefined tenant should fail`);
        }

        startCase.tenant = tenant;

        // Wrong input should fail
        startCase.inputs = { 'not-existing-input-parameter': 123 };
        await this.tryStartCase(`Wrong inputs should fail`);

        // Remove definition should make it fail
        delete startCase.definition;
        await this.tryStartCase(`Missing case definition should fail`);
    }

    async tryStartCase(msg: string, expectedResponseCode: number = 400) {
        console.log('\n============\n' + msg);
        const response = await CaseService.startCase(sender, this.startCase, expectedResponseCode, msg)
        if (response instanceof CafienneResponse) {
            await response.text().then(response => console.log("Response text: " + response));
        }
    }
}
